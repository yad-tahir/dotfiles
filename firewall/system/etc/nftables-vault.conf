#!/usr/bin/nft -f

# ipv4/ipv6 Simple & Safe Firewall
# you can find examples in /usr/share/nftables/

flush ruleset

# Nat table is consulted when a new connection is created only
table ip nat {
	chain post{
		type nat hook postrouting priority 100;
		# log prefix "nat post "
		oifname {tun0, wlp71s0, enp67s0f0, enp67s0f1} masquerade
	}
}

table ip mangle {
	chain output{
		# We use the route type because there is no pre-route for output packets in nft;
		# Output packets first are routed then a 're-route' check will be preformed!
		type route hook output priority -150;

		# log prefix "mangle re-route check"

		# No VPN for the no-vpn, no-wan group
		meta skgid {1001, 1004} mark set 0x1
	}

	chain pre{
		type filter hook prerouting priority -150;
		# log prefix "mangle pre "

		# Don't forward VMs' traffic via VPN
		# 192.168.0.128/30 is from 192.168.0.129 to 192.168.0.158
		ip saddr {192.168.0.128/30, 192.168.1.0/24} ip daddr != {10.10.10.0/24, 10.10.11.0/24 } mark set 0x1 # When VPN is on but we are not accessing the VMs via VPN
		ip saddr {192.168.0.128/30, 192.168.1.0/24} ip daddr {192.168.0.0/24, 192.168.0.1/24 } mark set 0x0 # LAN
	}
}

table inet filter {
	chain input {
		type filter hook input priority 0; policy drop;

		# log prefix "filter input "

		# Prometheus node exporter
		ip saddr {192.168.0.128/25, 192.168.1.0/24, 169.254.0.0/16} accept

		udp dport {67,68,53} accept #DHCP & DNS services

		# allow established/related connections
		ct state {established, related} accept
		# early drop of invalid connections
		ct state invalid drop

		# allow from loopback
		iif 1 ip saddr 127.0.0.0/8 accept
		iif 1 ip daddr 127.0.0.0/8 accept

		# VPN
		iifname tun0 ip daddr {10.10.10.254} accept

		# Allow certain inbound ICMP types (ping, traceroute)
		# With these allowed you are a good network citizen
		ip protocol icmp icmp type { destination-unreachable, echo-reply, echo-request, source-quench, time-exceeded } accept
		# Without the nd-* ones ipv6 will not work.
		ip6 nexthdr icmpv6 icmpv6 type { destination-unreachable, echo-reply, echo-request, nd-neighbor-solicit,  nd-router-advert, nd-neighbor-advert, packet-too-big, parameter-problem, time-exceeded } accept

		ip protocol igmp accept comment "Accept IGMP"
	}
	chain forward {
		type filter hook forward priority 0; policy drop;

		# log prefix "filter forward "

		iif 1 ip saddr 127.0.0.0/8 accept
		iif 1 ip daddr 127.0.0.0/8 accept

		# no-net group
		meta skgid 1000 reject
		# no-wan group
		meta skgid 1004 jump no-wan

		# LAN VMs
		# ip daddr {192.168.0.129, 192.168.0.130} jump no-wan

		ip saddr {192.168.0.0/16, 169.254.0.0/16} accept # outbound from LAN
		ip daddr {192.168.0.0/16, 169.254.0.0/16} ip protocol icmp accept # ICMP inbound
		ip saddr {192.168.0.0/16, 169.254.0.0/16} ip daddr {192.168.0.0/16, 169.254.0.0/16} accept # LAN forwarding
		iifname tun0 ip saddr {10.10.10.0/24, 10.10.11.0/24} ip daddr {192.168.0.0/16, 169.254.0.0/16} accept # VPN inbound
		iifname != tun0 ip saddr {10.0.0.0/8,172.16.0.0/12} drop # No other private IP addresses from non-vpn sources
		ip saddr != {10.10.10.0/24, 10.10.11.0/24} ip daddr {192.168.0.0/16, 169.254.0.0/16} ct state {established, related} accept # non-VPN inbound
		ip saddr != {10.10.10.0/24, 10.10.11.0/24} ip daddr {192.168.0.0/16, 169.254.0.0/16} ct state invalid drop # non-VPN inbound
	  }

	chain output {
		type filter hook output priority 0; policy accept;

		# log prefix "filter output "

		# no-net group
		meta skgid 1000 drop
		# no-wan group
		meta skgid 1004 jump no-wan
	}
	chain no-wan {
		ip saddr != {10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 169.254.0.0/16} reject
		ip daddr != {10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, 169.254.0.0/16} reject
		ip6 saddr != {fd00::/8, fe80::/10} reject
		ip6 daddr != {fd00::/8, fe80::/10} reject
	}
}
