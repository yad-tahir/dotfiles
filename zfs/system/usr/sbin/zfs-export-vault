#!/bin/bash

# Copyright (C) 2020

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# A small script to export zfs sets. The script is designed to be executed
# only once a day.

if [ $UID -ne 0 ]; then
	echo "Please run this program as superuser"
	exit 1
fi

# Get the GPG key
. /home/$USER/bin/settings.sh
key="$(cat $GNUPGHOME/usage/zfs-backup.encrypt.key)"

# ZFS sets
backup_sets=( "vault-ssd/sys/gentoo/root"
			  "vault/data/liza/default"
			  "vault/data/liza/desktop"
			  "vault/data/liza/music"
			  "vault/data/liza/archive"
			  "vault/data/liza/pictures"
			  "vault/data/liza/videos"
			  "vault/data/yad/archive"
			  "vault/data/yad/default"
			  "vault/data/yad/documents"
			  "vault/data/yad/dotfiles"
			  "vault/data/yad/downloads"
			  "vault/data/yad/git"
			  "vault/data/yad/music"
			  "vault/data/yad/notes" )

# Get the target location
if [ "$#" -eq 1 ]; then
	location="${1}/backup"
else
	location="/cloud/backup"
fi

function backup {
	local target="$1"
	# Make sure the folder of the backup file exists.
	mkdir -p "${location}/${target}" 2> /dev/null

	local name="$2"
	local option="-R"
	local prefix=""
	if [ "$#" -ne 2 ]; then
		# Incremental backups require a start snap and end snap.
		name="$3"
		option="-R -I ${target}@$2"
		prefix="$2-to-"
	fi

	echo "Exporting ${target}@${name} with the GPG key $key"

	zfs send $option "${target}@${name}" |
		lz4 |
		gpg --yes --batch --compress-algo none \
			--homedir "$GNUPGHOME" \
			-r "${key}!" \
			-o "${location}/${target}/${prefix}${name}.lz4.gpg" \
			--encrypt
}

# Compute necessary names
major="$(date +%Y-%m)" #once a month
# Previous backup name
prev="$(date -d '1 day ago' +%Y-%m-%d-000000)"
# Current backup name
new="$(date +%Y-%m-%d-000000)"


for i in "${backup_sets[@]}"; do

	# Check if we have a major snapshot for the month. This condition is only
	# valid once a month.
	zfs snap -r "${i}@${major}" 2> /dev/null &&
		echo "Create a new major snap" &&
		backup "$i" "${major}"

	zfs snap -r "${i}@${prev}" 2> /dev/null &&
		echo "We are out-of-sync. Export missing backups" &&
		backup "$i" "${major}" "${prev}"

	# Create a zfs snapshot for the new backup if it does not exist.
	zfs snap -r "${i}@${new}" 2> /dev/null

	case "$(date +%a)" in
		# If it is Friday, create a backup starting from the beginning of the
		# month instead. This is a safety feature to avoid data loss caused by
		# corrupted incremental backups.
		Fri)
			backup "$i" "${major}" "${new}"
			;;
		*)
			# Perform an incremental backup.
			backup "$i" "${prev}" "${new}"
			;;
	esac
done
