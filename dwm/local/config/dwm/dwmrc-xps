#!/bin/bash

# Copyright (C) 2020

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
# 02110-1301, USA.

# Set the general setting for DPI
xrandr --auto

# Set the background color
feh --bg-fill $(/bin/ls ${HOME}/pictures/background/* | shuf -n 1) &

systemctl --user import-environment
# Avoid using systemd 'enable' feature for Emacs as it can launch Emacs server
# before importing most all env. variables. Instead, start Emacs service
# manually in the beginning of a new dwm session.
systemctl --user restart emacs-27.service &

setxkbmap # Make sure X11 keymap is loaded properly before starting sxhkd
systemctl --user restart sxhkd-dwm@${XDG_VTNR}.service &

# Disable key stroke repeating
xset r off

# Startup commands
gpg-connect-agent /bye

insync() {
	local tmp=$(insync-headless get_sync_progress 2> /dev/null | head -n1)
	local status=$(insync-headless get_status 2> /dev/null)

	if [ "$tmp" == "No syncing activities" -a "$status" == "SHARE" ]; then
		echo -e " "
	else
		# Calculate the mean of the progress' percentage. Insync shares this data
		# when uploading or downloading files.
		per=$(insync-headless get_sync_progress |
				  awk '/[:number:]?%/{
						p=$2;
						gsub("\\(","",p);
						gsub("%","",p);
						# update sum and count
						s+=p
						n+=1;
					}END{
						# print the mean
						if (n != 0)
							printf ("%d\n", s/n)
					}' 2> /dev/null)
		if [ "$tmp" == "Download" ]; then
			echo -e "\x04  Downloading ${per}% \x01 "
		elif [ "$tmp" == "Uploading" ]; then
			echo -e "\x04  Uploading ${per}% \x01 "
		else
			echo -e "\x05  $status \x01 "
		fi
	fi
}

gpu(){
	local status=$(cat /sys/bus/pci/devices/0000:01:00.0/power/runtime_status 2> /dev/null || echo igpu)

	if [ "$status" == "active" ]; then
		echo -e "\x04  dGPU \x01 "
	else
		echo -e ""
	fi
}

temp(){
	local r=$(sensors k10temp-pci-00c3 | awk '/Tdie/{gsub("+", "",$2); print $2}')
	echo -e " $r "
}

fan(){
	local fan1=$(sensors | awk '/^fan1/{print $2}')
	local fan2=$(sensors | awk '/^fan2/{print $2}')
	# local fan1=$(sensors | awk '/^fan1/{print " "$2}/^fan2/{print $2" "}')

	if [ $fan1 -ge 4000 ]; then
		echo -e "\x05  $fan1 $fan2 \x01 "
	elif [ $fan1 -ge 3500 ]; then
		echo -e "\x04  $fan1 $fan2 \x01 "
	elif [ $fan1 -ge 2500 ]; then
		echo -e "\x07  $fan1 $fan2 \x01 "
	else
		echo -e " $fan1 $fan2 "
	fi
}

mem(){
	local m=$(free | awk '/^Mem/{$1=sprintf("%.1f",($2-$7)/(1024^2)); print $1}')
	if (( $(echo $m'>'24 | bc ) )); then
		m="\x05  ${m}GB \x01 "
	else
		m=" ${m}GB "
	fi
	echo -e "$m"
}

emacs(){
	local v=$(emacsclient -a=/bin/true -ne '(length (do-list-buffers))' | bc)
	if [ ! -z "$v" ]; then
		echo -e " $v "
	fi
}

keyboard(){
	local layout=$(setxkbmap -query |
				   awk '/^layout/{split($2,arr,","); print toupper(arr[1])}')
	local variant=$(setxkbmap -query |
				   awk '/^variant/{split($2,arr,","); print toupper(arr[1])}')
	local caps=$(xset -q | awk '/Caps/{print $4}')
	local state=''
	if [ "$variant" != "DVORAK" ]; then
		state="\x04  $layout \x01"
	else
		state=" $variant"
	fi
	if [ "$caps" = 'off' ]; then
		echo -e "$state "
	else
		echo -e "\x05  CAPS \x01 $state "
	fi
}

vol(){
	local v=$(pulsemixer --get-volume | awk '{print $1}')
	if [ $v -ge 101 ]; then
		v="\x05  ${v}% \x01 "
	elif [ $v = 0 ]; then
		v="\x04  \x01 "
	else
		v=" ${v}% "
	fi
	echo -e "$v"
}

uptime(){
	local r=$(echo $(cut -f 1 -d ' ' /proc/loadavg)*100/$(nproc) | /usr/bin/bc)
	if [ $r -ge 80 ]; then
		echo -e "\x05  $r% \x01 "
	elif [ $r -ge 50 ]; then
		echo -e "\x04  $r% \x01 "
	elif [ $r -ge 25 ]; then
		echo -e "\x07  $r% \x01 "
	else
		echo -e " $r% "
	fi
}

energy_profile(){
	local v=$(cat /sys/devices/system/cpu/cpufreq/policy0/energy_performance_preference)
	if [ $v = "power" ]; then
		echo -e "\x06  SAVE \x01 "
	elif [ $v = "performance" ]; then
		echo -e "\x06  PRFM \x01 "
	elif [ $v = "balance_performance" ]; then
		echo -e " BLPR "
	else
		echo -e " $v "
	fi
}

vpn(){
	local v=$(ip route | head -n 1 | grep 'tun0')
	if [ -z "$v" ]; then
		echo -e "\x05  OFF \x01 "
	else
		echo -e " ON "
	fi
}

battery(){
	local code=$(acpi | awk '{print tolower(substr($3,1,length($3)-1))}')
	local level=$(acpi |  awk '{gsub(",","",$0);gsub("%","",$0);print $4}')
	local time=$(acpi | awk '{print " "$5" "}')

	if [ "$time" = " rate " ]; then
		time=" 0:00:00 "
	fi

	if [ "$code" = "discharging" ]; then
		echo -e "\x04  ${level}%${time}\x01 "
	elif [ "$code" = "charging" ]; then
		echo -e "\x07  ${level}%${time}\x01 "
	else
		echo -e " ${level}% "
	fi
}

time_left(){
	printf " %'d " $(life)
}

while [ 1 ]; do
	# status="$(fan)$(temp)$(uptime)$(mem)$(emacs)$(vpn)$(insync)| $(gpu)$(energy_profile)$(battery)$(vol)$(keyboard)| $(time_left)| $(date +'%a, %b %d %H:%M')"
	status="$(temp)$(uptime)$(mem)$(emacs)$(vpn)$(insync)| $(vol)$(keyboard)| $(time_left)| $(date +'%a, %b %d %H:%M')"
	status=$(echo -e "$status" | tr '\n' ' ')
	xsetroot -name "$status"
	sleep 1m
done
